
DesignAssignment2CT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a27  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090c  00000000  00000000  00000c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033e  00000000  00000000  0000156b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000018ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000481  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003d  00000000  00000000  00001d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001dce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  c4:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <set>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>

void set(){
	TCCR0A = 0;//NORMAL MODE OPERATION
  cc:	14 bc       	out	0x24, r1	; 36
	TCCR0B  = 0X05;//THE PRESCALER SET TO 1024
  ce:	85 e0       	ldi	r24, 0x05	; 5
  d0:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0X00;//COUNTER VALUE = 0
  d2:	16 bc       	out	0x26, r1	; 38
  d4:	08 95       	ret

000000d6 <On_413>:
}

void On_413(){
	int cycle = 25;//CYCLE AMOUNT FOR 413ms
	DDRB |= (1<<3);//SET PORTB.3 "ON"
  d6:	23 9a       	sbi	0x04, 3	; 4
  d8:	89 e1       	ldi	r24, 0x19	; 25
  da:	90 e0       	ldi	r25, 0x00	; 0
	while (cycle != 0){
		cycle --;
		while((TIFR0 & 0X01) == 0);
		TIFR0 = 0X01;//RESET OVERFLOW FLAG
  dc:	21 e0       	ldi	r18, 0x01	; 1
void On_413(){
	int cycle = 25;//CYCLE AMOUNT FOR 413ms
	DDRB |= (1<<3);//SET PORTB.3 "ON"
	while (cycle != 0){
		cycle --;
		while((TIFR0 & 0X01) == 0);
  de:	a8 9b       	sbis	0x15, 0	; 21
  e0:	fe cf       	rjmp	.-4      	; 0xde <On_413+0x8>
		TIFR0 = 0X01;//RESET OVERFLOW FLAG
  e2:	25 bb       	out	0x15, r18	; 21
  e4:	01 97       	sbiw	r24, 0x01	; 1
}

void On_413(){
	int cycle = 25;//CYCLE AMOUNT FOR 413ms
	DDRB |= (1<<3);//SET PORTB.3 "ON"
	while (cycle != 0){
  e6:	d9 f7       	brne	.-10     	; 0xde <On_413+0x8>
		cycle --;
		while((TIFR0 & 0X01) == 0);
		TIFR0 = 0X01;//RESET OVERFLOW FLAG
	}
}
  e8:	08 95       	ret

000000ea <Off_337>:

void Off_337(){
	int cycle = 20;//CYCLE AMOUNT FOR 337ms
	DDRB = (0<<3);//SET PORTB.3 "OFF"
  ea:	14 b8       	out	0x04, r1	; 4
  ec:	84 e1       	ldi	r24, 0x14	; 20
  ee:	90 e0       	ldi	r25, 0x00	; 0
	while (cycle != 0){
		cycle --;
		while ((TIFR0 & 0X01) == 0);
		TIFR0 = 0X01;//RESET OVERFLOW FLAG
  f0:	21 e0       	ldi	r18, 0x01	; 1
void Off_337(){
	int cycle = 20;//CYCLE AMOUNT FOR 337ms
	DDRB = (0<<3);//SET PORTB.3 "OFF"
	while (cycle != 0){
		cycle --;
		while ((TIFR0 & 0X01) == 0);
  f2:	a8 9b       	sbis	0x15, 0	; 21
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <Off_337+0x8>
		TIFR0 = 0X01;//RESET OVERFLOW FLAG
  f6:	25 bb       	out	0x15, r18	; 21
  f8:	01 97       	sbiw	r24, 0x01	; 1
}

void Off_337(){
	int cycle = 20;//CYCLE AMOUNT FOR 337ms
	DDRB = (0<<3);//SET PORTB.3 "OFF"
	while (cycle != 0){
  fa:	d9 f7       	brne	.-10     	; 0xf2 <Off_337+0x8>
		cycle --;
		while ((TIFR0 & 0X01) == 0);
		TIFR0 = 0X01;//RESET OVERFLOW FLAG
	}
}
  fc:	08 95       	ret

000000fe <Button>:

void Button(){
	int cycle = 122;//CYCLE AMOUNT FOR 2s
	DDRB = (0<<3);//SET PORTB.3 "OFF"
  fe:	14 b8       	out	0x04, r1	; 4
	DDRB |= (1<<2);//SET PORTB.2 "ON"
 100:	22 9a       	sbi	0x04, 2	; 4
 102:	8a e7       	ldi	r24, 0x7A	; 122
 104:	90 e0       	ldi	r25, 0x00	; 0
	while (cycle != 0){
		cycle --;
		while ((TIFR0 & 0X01) == 0);
		TIFR0 = 0X01;//RESET OVERFLOW FLAG
 106:	21 e0       	ldi	r18, 0x01	; 1
	int cycle = 122;//CYCLE AMOUNT FOR 2s
	DDRB = (0<<3);//SET PORTB.3 "OFF"
	DDRB |= (1<<2);//SET PORTB.2 "ON"
	while (cycle != 0){
		cycle --;
		while ((TIFR0 & 0X01) == 0);
 108:	a8 9b       	sbis	0x15, 0	; 21
 10a:	fe cf       	rjmp	.-4      	; 0x108 <Button+0xa>
		TIFR0 = 0X01;//RESET OVERFLOW FLAG
 10c:	25 bb       	out	0x15, r18	; 21
 10e:	01 97       	sbiw	r24, 0x01	; 1

void Button(){
	int cycle = 122;//CYCLE AMOUNT FOR 2s
	DDRB = (0<<3);//SET PORTB.3 "OFF"
	DDRB |= (1<<2);//SET PORTB.2 "ON"
	while (cycle != 0){
 110:	d9 f7       	brne	.-10     	; 0x108 <Button+0xa>
		cycle --;
		while ((TIFR0 & 0X01) == 0);
		TIFR0 = 0X01;//RESET OVERFLOW FLAG
	}
	DDRB = (0<<3);//SET PORTB.3 "OFF"
 112:	14 b8       	out	0x04, r1	; 4
 114:	08 95       	ret

00000116 <main>:
}

int main(void){
	DDRC &=~ (1<<3);//SET PORTC.3 INPUT
 116:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1<<3);//PULL-UP RESISTOR ACTIVATE
 118:	43 9a       	sbi	0x08, 3	; 8
	while (1){
		set();//CALL SET FCT
 11a:	0e 94 66 00 	call	0xcc	; 0xcc <set>
		if (!(PINC & (1 <<3))){//IF BUTTON PRESS @ PINC.3
 11e:	33 9b       	sbis	0x06, 3	; 6
			Button();//CALL BUTTON FCT
 120:	0e 94 7f 00 	call	0xfe	; 0xfe <Button>
		}
		On_413();//CALL On_413 FCT
 124:	0e 94 6b 00 	call	0xd6	; 0xd6 <On_413>
		Off_337();//CALL Off_337 FCT
 128:	0e 94 75 00 	call	0xea	; 0xea <Off_337>
	}
 12c:	f6 cf       	rjmp	.-20     	; 0x11a <main+0x4>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
