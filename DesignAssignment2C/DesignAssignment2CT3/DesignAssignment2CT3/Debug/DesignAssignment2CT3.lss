
DesignAssignment2CT3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ee  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092f  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031a  00000000  00000000  000015b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000018d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000481  00000000  00000000  00001938  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001db9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001df5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_16>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a1 30       	cpi	r26, 0x01	; 1
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 98 00 	call	0x130	; 0x130 <main>
  d4:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <set>:


volatile uint8_t Overflow;

void set(){
	TCCR0A = (1<<WGM01);//CTC MODE OPERATION
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	84 bd       	out	0x24, r24	; 36
	TCCR0B  = 0X05;//THE PRESCALER SET TO 1024
  e0:	95 e0       	ldi	r25, 0x05	; 5
  e2:	95 bd       	out	0x25, r25	; 37
	TCNT0 = 0X00;//COUNTER VALUE = 0
  e4:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0X80;//COMPARE REGISTER VALUE OF 128
  e6:	90 e8       	ldi	r25, 0x80	; 128
  e8:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A);//ENABLE TIMER COMPARE INTERUPT
  ea:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	sei();//ENABLE GLOBAL INTERUPT
  ee:	78 94       	sei
  f0:	08 95       	ret

000000f2 <__vector_16>:
}

ISR(TIMER0_OVF_vect){
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
	Overflow++;//INCREMENT OVERFLOW
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <Button>:

void Button(){
	DDRB = (0<<3);//SET PORTB.3 "OFF"
 114:	14 b8       	out	0x04, r1	; 4
	Overflow = 0;//RESET OVERFLOW
 116:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	set();//CALL SET FCT
 11a:	0e 94 6e 00 	call	0xdc	; 0xdc <set>
	DDRB |= (1<<2);//SET PORTB.2 "ON"
 11e:	22 9a       	sbi	0x04, 2	; 4
	while (Overflow < 243);
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 124:	83 3f       	cpi	r24, 0xF3	; 243
 126:	e0 f3       	brcs	.-8      	; 0x120 <Button+0xc>
	DDRB = (0<<2);//SET PORTB.2 "OFF"
 128:	14 b8       	out	0x04, r1	; 4
	Overflow = 0;
 12a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 12e:	08 95       	ret

00000130 <main>:
}

int main(void){
	DDRC &=~ (1<<3);//SET PORTC.3 INPUT
 130:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1<<3);//PULL-UP RESISTOR ACTIVATE
 132:	43 9a       	sbi	0x08, 3	; 8
	set();//CALL set FCT
 134:	0e 94 6e 00 	call	0xdc	; 0xdc <set>
	DDRB = (1<<3);//SET PORTB.3 "ON"
 138:	88 e0       	ldi	r24, 0x08	; 8
 13a:	84 b9       	out	0x04, r24	; 4
		//CONTROL ENTERS IF BUTTON PRESSED @ PORTB.3
		if (!(PINC & (1<<3))){
			Button();//CALL Button FCT.
		}
		//CONTROL ENTERS IF OVERFLOW VALUE BETWEEN 50 & 73
		if ((Overflow >= 50) & (Overflow < 73)){
 13c:	10 e0       	ldi	r17, 0x00	; 0
 13e:	c1 e0       	ldi	r28, 0x01	; 1
 140:	d1 2f       	mov	r29, r17
			DDRB = (0<<3);//SET PORTB.3 "OFF"
		}
		//CONTROL ENTERS IF OVERFLOW VALUE IS GREATER THAN 73
		if ((Overflow > 73)){
			DDRB = (1<<3);//SET PORTB.3 "ON"
 142:	08 e0       	ldi	r16, 0x08	; 8
	PORTC |= (1<<3);//PULL-UP RESISTOR ACTIVATE
	set();//CALL set FCT
	DDRB = (1<<3);//SET PORTB.3 "ON"
	while (1){
		//CONTROL ENTERS IF BUTTON PRESSED @ PORTB.3
		if (!(PINC & (1<<3))){
 144:	33 9b       	sbis	0x06, 3	; 6
			Button();//CALL Button FCT.
 146:	0e 94 8a 00 	call	0x114	; 0x114 <Button>
		}
		//CONTROL ENTERS IF OVERFLOW VALUE BETWEEN 50 & 73
		if ((Overflow >= 50) & (Overflow < 73)){
 14a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 14e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 152:	8c 2f       	mov	r24, r28
 154:	92 33       	cpi	r25, 0x32	; 50
 156:	08 f4       	brcc	.+2      	; 0x15a <main+0x2a>
 158:	8d 2f       	mov	r24, r29
 15a:	88 23       	and	r24, r24
 15c:	31 f0       	breq	.+12     	; 0x16a <main+0x3a>
 15e:	8c 2f       	mov	r24, r28
 160:	29 34       	cpi	r18, 0x49	; 73
 162:	08 f0       	brcs	.+2      	; 0x166 <main+0x36>
 164:	8d 2f       	mov	r24, r29
 166:	81 11       	cpse	r24, r1
			DDRB = (0<<3);//SET PORTB.3 "OFF"
 168:	14 b8       	out	0x04, r1	; 4
		}
		//CONTROL ENTERS IF OVERFLOW VALUE IS GREATER THAN 73
		if ((Overflow > 73)){
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16e:	8a 34       	cpi	r24, 0x4A	; 74
 170:	48 f3       	brcs	.-46     	; 0x144 <main+0x14>
			DDRB = (1<<3);//SET PORTB.3 "ON"
 172:	04 b9       	out	0x04, r16	; 4
			Overflow = 0;//RESET OVERFLOW TO 0
 174:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <_edata>
 178:	e5 cf       	rjmp	.-54     	; 0x144 <main+0x14>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
